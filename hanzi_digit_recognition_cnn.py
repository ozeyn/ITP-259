# -*- coding: utf-8 -*-
"""hanzi digit recognition cnn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oEK8l-q0bbYBRTCL5o5MQykXDSjtoMwA
"""

# Zeynep Ozdol
# ITP 259 Spring 2025
#

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.utils import to_categorical
import matplotlib.font_manager as fm

# Plot the count of each Chinese number
df = pd.read_csv('sample_data/chineseMNIST.csv')
hanzi = df['character'].values
label_to_hanzi = df.drop_duplicates('label').sort_values('label')['character'].tolist()

plt.figure(figsize=(8, 4))
df['label'].value_counts().sort_index().plot(kind='bar')
plt.title("Count of Each Chinese Number")
plt.xlabel("Number")
plt.ylabel("Count")
plt.show()

# Visualize 25 random characters from the dataset
image_data = df.iloc[:, :4096].values.reshape(-1, 64, 64)
labels = df['label'].values
hanzi = df['character'].values
font_path = 'SimHei.ttf'
font_prop = fm.FontProperties(fname=font_path)

plt.figure(figsize=(10, 10))
for i, idx in enumerate(np.random.choice(len(image_data), 25, replace=False)):
    plt.subplot(5, 5, i + 1)
    plt.imshow(image_data[idx], cmap='gray')
    plt.title(hanzi[idx], fontproperties=font_prop, fontsize=14)
    plt.text(32, 70, str(labels[idx]), fontsize=14, ha='center')
    plt.axis('off')
plt.tight_layout()
plt.show()

X = image_data.astype('float32') / 255

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
                                                    random_state=2022, stratify=y)
print("Train shape:", X_train.shape)
print("Test shape:", X_test.shape)

# Build a model of the NN using keras layers
label_encoder = LabelEncoder()
y_train = label_encoder.fit_transform(y_train)
y_test = label_encoder.transform(y_test)
X_train = X_train.reshape(-1, 64, 64, 1).astype('float32')
X_test = X_test.reshape(-1, 64, 64, 1).astype('float32')

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu',
                 padding='same', input_shape=(64, 64, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(100, activation='relu'))
model.add(Dense(15, activation='softmax'))

model.summary()

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

y_train = y_train.astype('int32')
y_test = y_test.astype('int32') # Train the model

history = model.fit(X_train, y_train, epochs=25,
                    validation_data=(X_test, y_test))

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss Curve')
plt.legend() # Loss curve

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy Curve')
plt.legend()
plt.show() # Accuracy curve

# Visualize the predicted and actual image labels for the first 30 images
y_pred_probs = model.predict(X_test)
y_pred = np.argmax(y_pred_probs, axis=1)


plt.figure(figsize=(10, 10))
for i in range(30):
    plt.subplot(5, 6, i + 1)
    plt.imshow(X_test[i].reshape(64, 64), cmap='gray')

    actual_label = y_test[i]
    pred_label = y_pred[i]

    plt.title(f"Predicted: {label_to_hanzi[pred_label]}", fontproperties=font_prop, fontsize=14)
    plt.text(32, 70, f"Actual: {label_to_hanzi[actual_label]}", fontproperties=font_prop, fontsize=14, ha='center')

    plt.axis('off')
plt.tight_layout()
plt.show()

# Visualize 30 random misclassified images
misclassified = np.where(y_pred != y_test)[0]
random_misclassified = np.random.choice(misclassified, size=30, replace=False)

plt.figure(figsize=(10, 10))
for i, idx in enumerate(random_misclassified):
    plt.subplot(5, 6, i + 1)
    plt.imshow(X_test[idx].reshape(64, 64), cmap='gray')

    pred = y_pred[idx]
    true = y_test[idx]

    plt.title(f"Predicted: {label_to_hanzi[pred]}", fontproperties=font_prop, fontsize=14)
    plt.text(32, 70, f"Actual: {label_to_hanzi[true]}", fontproperties=font_prop, fontsize=14, ha='center')
    plt.axis('off')

plt.tight_layout()
plt.show()