# -*- coding: utf-8 -*-
"""keras_nn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11wmOzq4UZBFK6tao7zJaa2PlBIKMxliR
"""

# Zeynep Ozdol
# ITP 259 Spring 2025
# Building Keras NN

import tensorflow as tf
from tensorflow import keras
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random

fashion = tf.keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion.load_data()

# Convert train_images to CSV format
train_flat = train_images.reshape(train_images.shape[0], -1)
df_train = pd.DataFrame(train_flat)
df_train.to_csv('fashion.csv', index=False)

dataset = df_train.copy()

print("CSV shape:", df_train.shape)
print(df_train.head())  # Each row is one flattened 28x28 image, pixel values between 0 and 255

print("Train images shape:", train_images.shape)
print("Train labels shape:", train_labels.shape)
print("Test images shape:", test_images.shape)
print("Test labels shape:", test_labels.shape)

print("Example labels:", np.unique(train_labels))  # They're numbers (0â€“9)

# Map numbers to clothing
apparel_dict = {
    0: "T-shirt/top", 1: "Trouser", 2: "Pullover", 3: "Dress", 4: "Coat",
    5: "Sandal", 6: "Shirt", 7: "Sneaker", 8: "Bag", 9: "Ankle boot"
}
dataset = pd.DataFrame(train_labels, columns=["label"])
dataset["apparel"] = dataset["label"].map(apparel_dict)

# Histogram
plt.figure(figsize=(10,6))
order = [apparel_dict[i] for i in range(10)]
ax = sns.countplot(data=dataset, x="apparel", hue="apparel", palette="tab10", order = order, legend=False)
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.title(apparel_dict[train_labels[i]])
plt.show() # Display 25 random apparel from the train dataset with their labels

train_images = train_images/255
test_images = test_images/255

model = keras.Sequential()
model.add(keras.layers.Flatten(input_shape=(28, 28)))
model.add(keras.layers.Dense(100, activation='relu'))
model.add(keras.layers.Dense(100, activation='relu'))

model.add(keras.layers.Dense(10, activation='softmax'))

model.summary()

model.compile(optimizer='sgd',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=100)

pd.DataFrame(history.history).plot()
plt.show() # Loss curve

test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print("Test accuracy:", test_acc)

# Display predicted and actual apparel of the first row in the test dataset
y_pred = model.predict(test_images)
y_pred = np.argmax(y_pred, axis=1)

plt.figure()
plt.imshow(train_images[0], cmap="gray")
plt.title("The actual apparel is " + str(apparel_dict[train_labels[0]]))
plt.xlabel("The predicted apparel is " + str(apparel_dict[y_pred[0]]))
plt.show()

# Display predicted and actual apparel of a misclassified apparel
misclassified_indices = np.where(y_pred != test_labels)[0]
random_index = random.choice(misclassified_indices)

plt.figure()
plt.imshow(test_images[random_index], cmap="gray")
plt.title(f"The failed predicted apparel is {apparel_dict[y_pred[random_index]]} whereas the actual apparel is {apparel_dict[test_labels[random_index]]}")
plt.show()