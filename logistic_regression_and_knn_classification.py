# -*- coding: utf-8 -*-
"""Logistic regression and kNN classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tC3vKPCcEPwhGnlhq3eH8pTyLblsJ-T7
"""

# Zeynep Ozdol
# ITP 259 Spring 2025
# Review of supervised machine learning: Logistic regression and kNN classification

# PROBLEM 1

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

titanic = pd.read_csv("sample_data/Titanic.csv") # Read the dataset into a dataframe

data = titanic.drop(['Survived','Passenger'], axis=1) # Drop factors not likely to be relevant for logistic regression

data_dummy = pd.get_dummies(data) # Convert all categorical feature variables into dummy variables

y = titanic['Survived']
X = data_dummy # Assign X and y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2023, stratify = y)
# Partition the data into train and test sets, stratify the data

logReg = LogisticRegression()
logReg.fit(X_train, y_train)
y_pred = logReg.predict(X_test) # Fit the training data to a logistic regression model

print('Accuracy: ', metrics.accuracy_score(y_test, y_pred)) # Display accuracy

cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
ConfusionMatrixDisplay(confusion_matrix=cnf_matrix, display_labels=logReg.classes_).plot()
# Plot the confusion matrix

prediction = logReg.predict([[0, 0, 1, 0, 0, 1, 1, 0]])
print('Predicted value of the survivability of a male adult passenger traveling in 3rd class: ', prediction)

# PROBLEM 2

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

#1
diabetes_knn = pd.read_csv("sample_data/diabetes.csv")
#print(diabetes_knn)

#2

X = diabetes_knn.drop(['Outcome'], axis=1)
y = diabetes_knn['Outcome']
# print('X = ', X)
# print('y = ', y)

#3
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X)
# print(X)

#4
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=2023, stratify = y)
X_A, X_B, y_A, y_B = train_test_split(X_train, y_train, test_size = 0.5, random_state = 2023, stratify = y_train)

''' print("X_A shape:", X_A.shape)
print("X_B shape:", X_B.shape)
print("X_test shape:", X_test.shape)
print("y_A shape:", y_A.shape)
print("y_B shape:", y_B.shape)
print("y_test shape:", y_test.shape) '''

#5
ks_A = list(range(1,30))

# An empty list for our results:
scores_A = []

for k in ks_A:
    knn = KNeighborsClassifier(n_neighbors=k)   # define model
    knn.fit(X_A, y_A)
    y_pred_A = knn.predict(X_A)   # predict
    scores_A.append(knn.score(X_A, y_A))

# print(scores_A)

#6
ks_B = list(range(1,30))

scores_B = []

for k in ks_B:
    knn = KNeighborsClassifier(n_neighbors=k)   # define model
    knn.fit(X_B, y_B)
    y_pred_B = knn.predict(X_B)   # predict
    scores_B.append(knn.score(X_B, y_B))

# print(scores_B)

Accuracy_A = metrics.accuracy_score(y_A, y_pred_A)
Accuracy_B = metrics.accuracy_score(y_B, y_pred_B)
# print('Accuracy_A: ', Accuracy_A)
# print('Accuracy_B: ', Accuracy_B)

#7

plt.title('Accuracy Scores')
plt.plot(ks_A, scores_A, label='Training A')
plt.plot(ks_B, scores_B, label='Training B')
plt.xlabel('Values of k')
plt.ylabel('Accuracy Score')
plt.legend()
plt.show()

# 8
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print('Accuracy of test: ', metrics.accuracy_score(y_test, y_pred))

# 9
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
ConfusionMatrixDisplay(confusion_matrix=cnf_matrix, display_labels=knn.classes_).plot()

# 10
prediction = knn.predict([[2, 150, 85, 22, 200, 30, 0.3, 55]])
print('Predicted diabetes outcome:')
if prediction == 1:
  print('Positive')
else:
  print('Negative')