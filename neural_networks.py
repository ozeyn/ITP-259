# -*- coding: utf-8 -*-
"""neural networks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HZfB5TfjxKLwaIlkkU3kGYXr0-HXBOfW
"""

import numpy as np
from numpy import pi
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.datasets import make_circles
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.neural_network import MLPClassifier

# 2.1
N = 400

theta = (np. random. rand (N) )*2*pi

r_a = 2*theta + pi
data_a = np.array ([np.cos (theta)*r_a, np.sin(theta)*r_a]).T
x_a = data_a + np. random. randn(N,2)

r_b = -2*theta - pi
data_b = np.array ([np.cos (theta)*r_b, np.sin (theta)*r_b]).T
x_b = data_b + np. random. randn(N,2)

res_a = np.append(x_a, np.zeros ((N,1)), axis=1)
res_b = np.append(x_b, np.ones((N,1)), axis=1)
res = np.append(res_a, res_b, axis=0)
np. random. shuffle(res)

X = res[:,0:2]
y = res[:,2]

np.savetxt("result.csv", res, delimiter=",", header="x,y, label", comments="", fmt="%.5f")

plt.scatter(x_a[:,0],x_a[:,1])
plt.scatter(x_b[:,0],x_b[:,1])

plt.show()

#2.2
plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.viridis, alpha=0.7, edgecolors='k')
plt.show()

#2.3
X_train, X_test , Y_train, Y_test = \
train_test_split(X, y,test_size=0.30, random_state=2023, stratify=y)

# 2.4
mlp = MLPClassifier(hidden_layer_sizes=(100,), activation='relu', solver='adam',
                    max_iter=500, random_state=2023, learning_rate_init=0.03,
                    verbose=True)
mlp.fit(X_train, Y_train)

# 2.5
plt.plot(mlp. loss_curve_)
plt. show()

# 2.6
print("Accuracy:" , mlp.score(X_test,Y_test))

#2.7
Y_pred = mlp.predict(X_test)

cm = confusion_matrix(Y_test, Y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

#2.8
X1 = np.arange (-20,20, 0.1)
X2 = np.arange (-20,20,0.1)

X1, X2 = np.meshgrid(X1, X2)

X1 = np.arange (-20,20, 0.1)
X2 = np.arange (-20,20,0.1)

X1, X2 = np.meshgrid(X1, X2)

print (X1)
print (X2)

X_decision = pd. DataFrame ({"A": np. reshape (X1,160000), "B": np. reshape (X2,160000) })
print (X_decision)

Z = mlp. predict(X_decision)

plt.scatter(x=X_decision["A"],y=X_decision["B"], c=Z, cmap="BuGn")
plt.scatter(x=X[:,0], y=X[:,1], c=y)
plt.show()