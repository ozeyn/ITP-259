# -*- coding: utf-8 -*-
"""image classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t8o8_j67dbsu3tW42DPR63I1LvmraMoc
"""

# Zeynep Ozdol
# ITP 259 Spring 2025
# Image classification using CNN

from tensorflow import keras
from keras.datasets import cifar100
from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten
from keras.utils import to_categorical
import matplotlib.pyplot as plt
import numpy as np

keras.datasets.cifar100.load_data(label_mode="fine")

class_names = ['apple', 'aquarium_fish', 'baby', 'bear', 'beaver', 'bed',
                'bee', 'beetle', 'bicycle', 'bottle', 'bowl', 'boy', 'bridge',
                'bus', 'butterfly', 'camel', 'can', 'castle', 'caterpillar', 'cattle',
                'chair', 'chimpanzee', 'clock', 'cloud', 'cockroach', 'couch', 'crab',
                'crocodile', 'cup', 'dinosaur', 'dolphin', 'elephant', 'flatfish',
                'forest', 'fox', 'girl', 'hamster', 'house', 'kangaroo', 'keyboard',
                'lamp', 'lawn_mower', 'leopard', 'lion', 'lizard', 'lobster', 'man',
                'maple_tree', 'motorcycle', 'mountain', 'mouse', 'mushroom', 'oak_tree',
                'orange', 'orchid', 'otter', 'palm_tree', 'pear', 'pickup_truck',
                'pine_tree', 'plain', 'plate', 'poppy', 'porcupine', 'possum', 'rabbit',
                'raccoon', 'ray', 'road', 'rocket', 'rose', 'sea', 'seal', 'shark',
                'shrew', 'skunk', 'skyscraper', 'snail', 'snake', 'spider', 'squirrel',
                'streetcar', 'sunflower', 'sweet_pepper', 'table', 'tank', 'telephone',
                'television', 'tiger', 'tractor', 'train', 'trout', 'tulip', 'turtle',
                'wardrobe', 'whale', 'willow_tree', 'wolf', 'woman', 'worm']

(X_train, y_train), (X_test, y_test) = cifar100.load_data()

print('X_train.shape =', X_train.shape)
print('y_train.shape=', y_train.shape)
print('X_test.shape', X_test.shape)
print('y_test.shape', y_test.shape)

plt.figure(figsize=[10,10])
for i in range (30):
  plt.subplot(5, 6, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(X_train[i])
  plt.xlabel(class_names[y_train[i,0]]) # Visualize the first 30 images from the train dataset

X_train = X_train/255
X_test = X_test/255

n_classes = 100
print("Shape before one-hot encoding: ", y_train.shape)
print("Class label for first 5 images:", y_train[:5])
Y_train = to_categorical(y_train, n_classes)
Y_test = to_categorical(y_test, n_classes)
print("Shape after one-hot encoding: ", y_train.shape)
print(y_train[:5])

# Build a CNN sequence of layers
model = Sequential()

model.add(Conv2D(100, kernel_size=(3,3), strides=(1,1),
                 padding='same', activation='relu', input_shape=(32, 32, 3)))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(100, activation='relu'))
model.add(Dropout(0.4))

model.add(Dense(100, activation='softmax'))

model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')
model.summary()

history = model.fit(X_train, Y_train, batch_size=64, epochs=10, validation_data=(X_test, Y_test))

plt.figure(figsize=[6,4])
plt.plot(history.history['accuracy'], 'black', linewidth=2.0)
plt.plot(history.history['val_accuracy'], 'blue', linewidth=2.0)
plt.legend(['Training Accuracy', 'Validation Accuracy'], fontsize=14)
plt.xlabel('Epochs', fontsize=10)
plt.ylabel('Accuracy', fontsize=10)
plt.title('Accuracy Curves', fontsize=12) # Accuracy curve

plt.figure(figsize=[6,4])
plt.plot(history.history['loss'], 'black', linewidth=2.0)
plt.plot(history.history['val_loss'], 'green', linewidth=2.0)
plt.legend(['Training Loss', 'Validation Loss'], fontsize=14)
plt.xlabel('Epochs', fontsize=10)
plt.ylabel('Loss', fontsize=10)
plt.title('Loss Curves', fontsize=12) # Loss curve

# Visualize the predicted and actual image labels for the first 30 images in the dataset

pred = model.predict(X_test)
pred_classes = np.argmax(pred, axis=1)

plt.figure(figsize=[10,10])
for i in range (30):
    plt.subplot(5, 6, i+1).imshow(X_test[i])
    plt.subplot(5, 6, i+1).set_title("True: %s \nPredict: %s" %
                      (class_names[y_test[i, 0]],
                       class_names[pred_classes[i]]), fontsize = 7)
    plt.subplot(5, 6, i+1).axis('off')

plt.subplots_adjust(hspace=0.5, wspace=0.5)

# Visualize 30 random misclassified images

misclassified_indices = np.where(pred_classes != y_test.flatten())[0]

misclassified_samples = np.random.choice(misclassified_indices, 30, replace=False)
plt.figure(figsize=(10,10))
for i, idx in enumerate(misclassified_samples):
    plt.subplot(5, 6, i + 1)
    plt.imshow(X_test[idx])
    plt.title("True: %s \nPredict: %s" %
              (class_names[y_test[idx, 0]], class_names[pred_classes[idx]]), fontsize = 7)
    plt.axis('off')
plt.subplots_adjust(hspace=0.5, wspace = 0.5)
plt.show()